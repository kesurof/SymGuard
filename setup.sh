#!/bin/bash

# Configuration et installation de SymGuard pour serveurs Linux
# Installation dans /home/kesurof/scripts/ avec gestion des mises √† jour
# Compatible Ubuntu 20.04+ / Debian 10+ - x86_64 / aarch64

set -e  # Arr√™t en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_VERSION="2.0.1"
INSTALL_DIR="/home/kesurof/scripts"
SCRIPT_NAME="symguard"
REPO_URL="https://github.com/kesurof/SymGuard.git"

echo -e "${BLUE}üöÄ SymGuard v${SCRIPT_VERSION} - Installation et mise √† jour${NC}"
echo "=============================================="

# Variables d'environnement d√©tect√©es
USER_NAME=${USER:-$(whoami)}
HOME_DIR=${HOME:-/home/$USER_NAME}
SETTINGS_SOURCE=${SETTINGS_SOURCE:-$HOME_DIR/seedbox-compose}
VIRTUAL_ENV_PATH=${VIRTUAL_ENV:-$SETTINGS_SOURCE/venv}

echo -e "${BLUE}üìã Informations d√©tect√©es:${NC}"
echo "   Utilisateur: $USER_NAME"
echo "   Home: $HOME_DIR"
echo "   R√©pertoire d'installation: $INSTALL_DIR"
echo "   Settings: $SETTINGS_SOURCE"
echo "   Virtual Env: $VIRTUAL_ENV_PATH"

# Cr√©ation du r√©pertoire d'installation
echo -e "\n${BLUE}üìÅ Pr√©paration r√©pertoire d'installation...${NC}"
mkdir -p "$INSTALL_DIR"

# Fonction de mise √† jour depuis GitHub
update_from_github() {
    echo -e "${BLUE}üì• T√©l√©chargement depuis GitHub...${NC}"
    
    if [ -d "$INSTALL_DIR/SymGuard" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Installation existante d√©tect√©e${NC}"
        echo -e "${BLUE}üîÑ Mise √† jour en cours...${NC}"
        cd "$INSTALL_DIR/SymGuard"
        
        # Sauvegarder les logs et configs locaux
        if [ -f "symlink_maintenance.log" ]; then
            cp symlink_maintenance.log ../symlink_maintenance.log.backup
        fi
        
        # Mise √† jour
        git fetch origin
        git reset --hard origin/main
        git clean -fd
    else
        echo -e "${BLUE}üì¶ Premi√®re installation...${NC}"
        cd "$INSTALL_DIR"
        git clone "$REPO_URL"
    fi
    
    cd "$INSTALL_DIR/SymGuard"
}

# Si nous sommes dans le repo clon√©, copier vers le r√©pertoire final
if [ -f "script.py" ] && [ "$(pwd)" != "$INSTALL_DIR/SymGuard" ]; then
    echo -e "${BLUE}üìã Copie depuis le r√©pertoire actuel...${NC}"
    mkdir -p "$INSTALL_DIR/SymGuard"
    cp -r . "$INSTALL_DIR/SymGuard/"
    cd "$INSTALL_DIR/SymGuard"
else
    update_from_github
fi

# V√©rification de l'environnement virtuel
echo -e "\n${BLUE}üêç V√©rification environnement Python...${NC}"

if [ -d "$VIRTUAL_ENV_PATH" ]; then
    echo -e "${GREEN}‚úÖ Environnement virtuel trouv√©: $VIRTUAL_ENV_PATH${NC}"
    
    # Activation de l'environnement virtuel
    source "$VIRTUAL_ENV_PATH/bin/activate"
    
    echo "   Python: $(python3 --version)"
    echo "   Pip: $(pip --version | cut -d' ' -f1-2)"
    
else
    echo -e "${RED}‚ùå Environnement virtuel non trouv√©${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Cr√©ation d'un nouvel environnement virtuel...${NC}"
    
    python3 -m venv "$VIRTUAL_ENV_PATH"
    source "$VIRTUAL_ENV_PATH/bin/activate"
    pip install --upgrade pip
fi

# Installation des d√©pendances
echo -e "\n${BLUE}üì¶ Installation des d√©pendances...${NC}"

if [ -f "requirements.txt" ]; then
    echo "Installation depuis requirements.txt..."
    pip install -r requirements.txt
else
    echo "Installation manuelle des d√©pendances essentielles..."
    pip install requests urllib3 psutil
fi

# V√©rification de ffprobe
echo -e "\n${BLUE}üîß V√©rification ffprobe...${NC}"

if command -v ffprobe &> /dev/null; then
    FFPROBE_VERSION=$(ffprobe -version 2>/dev/null | head -n1 | awk '{print $3}')
    echo -e "${GREEN}‚úÖ ffprobe trouv√©: $FFPROBE_VERSION${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è ffprobe non trouv√©${NC}"
    echo "Pour installer ffmpeg/ffprobe:"
    echo "   sudo apt update && sudo apt install ffmpeg"
fi

# V√©rification de Docker
echo -e "\n${BLUE}üê≥ V√©rification Docker...${NC}"

if command -v docker &> /dev/null; then
    if docker ps &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker accessible${NC}"
        
        # Liste des conteneurs m√©dia
        echo "Conteneurs m√©dia d√©tect√©s:"
        for container in sonarr radarr bazarr prowlarr; do
            if docker ps --filter name=$container --format "{{.Names}}" | grep -q $container; then
                STATUS=$(docker ps --filter name=$container --format "{{.Status}}")
                echo -e "   ${GREEN}‚úÖ $container${NC}: $STATUS"
            else
                echo -e "   ${YELLOW}‚ö†Ô∏è $container${NC}: non trouv√©"
            fi
        done
    else
        echo -e "${YELLOW}‚ö†Ô∏è Docker install√© mais non accessible (permissions?)${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Docker non trouv√©${NC}"
fi

# Rendre le script ex√©cutable
echo -e "\n${BLUE}üîó Configuration ex√©cutable...${NC}"
chmod +x script.py

# Cr√©er un script wrapper dans /usr/local/bin pour acc√®s global
echo -e "\n${BLUE}üåê Configuration acc√®s global...${NC}"

WRAPPER_SCRIPT="/usr/local/bin/$SCRIPT_NAME"
cat > "/tmp/$SCRIPT_NAME" << EOF
#!/bin/bash
# SymGuard Wrapper Script - v$SCRIPT_VERSION
# Installation: $INSTALL_DIR/SymGuard

# Activation de l'environnement virtuel
source "$VIRTUAL_ENV_PATH/bin/activate"

# Ex√©cution du script principal
cd "$INSTALL_DIR/SymGuard"
exec python3 script.py "\$@"
EOF

chmod +x "/tmp/$SCRIPT_NAME"

# Installer le wrapper (n√©cessite sudo)
if sudo cp "/tmp/$SCRIPT_NAME" "$WRAPPER_SCRIPT" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Commande globale '$SCRIPT_NAME' install√©e${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Installation globale √©chou√©e (sudo requis)${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è Installation de l'alias local...${NC}"
    
    # Cr√©er un alias dans .bashrc si pas d√©j√† pr√©sent
    BASHRC_FILE="$HOME_DIR/.bashrc"
    ALIAS_LINE="alias $SCRIPT_NAME='cd $INSTALL_DIR/SymGuard && source $VIRTUAL_ENV_PATH/bin/activate && python3 script.py'"
    
    if [ -f "$BASHRC_FILE" ]; then
        if ! grep -q "alias $SCRIPT_NAME=" "$BASHRC_FILE"; then
            echo "" >> "$BASHRC_FILE"
            echo "# SymGuard alias - v$SCRIPT_VERSION" >> "$BASHRC_FILE"
            echo "$ALIAS_LINE" >> "$BASHRC_FILE"
            echo -e "${GREEN}‚úÖ Alias '$SCRIPT_NAME' ajout√© √† .bashrc${NC}"
        else
            # Mettre √† jour l'alias existant
            sed -i "s|alias $SCRIPT_NAME=.*|$ALIAS_LINE|" "$BASHRC_FILE"
            echo -e "${GREEN}‚úÖ Alias '$SCRIPT_NAME' mis √† jour${NC}"
        fi
    fi
fi

# Cr√©er un script de mise √† jour
UPDATE_SCRIPT="$INSTALL_DIR/update-symguard.sh"
cat > "$UPDATE_SCRIPT" << EOF
#!/bin/bash
# Script de mise √† jour SymGuard
echo "üîÑ Mise √† jour SymGuard..."
cd "$INSTALL_DIR/SymGuard"
git fetch origin
git reset --hard origin/main
git clean -fd
echo "‚úÖ Mise √† jour termin√©e"
echo "‚ÑπÔ∏è Relancez la configuration: $INSTALL_DIR/SymGuard/setup.sh"
EOF

chmod +x "$UPDATE_SCRIPT"
echo -e "${GREEN}‚úÖ Script de mise √† jour cr√©√©: $UPDATE_SCRIPT${NC}"

# Test d'ex√©cution
echo -e "\n${BLUE}üß™ Test d'ex√©cution...${NC}"

if python3 script.py --help &> /dev/null; then
    echo -e "${GREEN}‚úÖ Script fonctionnel${NC}"
else
    echo -e "${RED}‚ùå Erreur lors du test${NC}"
    echo "V√©rifiez les logs pour plus de d√©tails"
fi

# V√©rification du r√©pertoire m√©dia par d√©faut
MEDIA_DIR="$HOME_DIR/Medias"
echo -e "\n${BLUE}üìÅ V√©rification r√©pertoire m√©dia...${NC}"

if [ -d "$MEDIA_DIR" ]; then
    if [ -r "$MEDIA_DIR" ]; then
        SYMLINK_COUNT=$(find "$MEDIA_DIR" -type l 2>/dev/null | wc -l)
        echo -e "${GREEN}‚úÖ $MEDIA_DIR accessible${NC}"
        echo "   Liens symboliques d√©tect√©s: $SYMLINK_COUNT"
    else
        echo -e "${RED}‚ùå $MEDIA_DIR non accessible en lecture${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è $MEDIA_DIR non trouv√©${NC}"
fi

# R√©sum√© final
echo -e "\n${GREEN}üéâ INSTALLATION TERMIN√âE${NC}"
echo "=============================================="
echo -e "${BLUE}üìç Installation:${NC} $INSTALL_DIR/SymGuard"
echo -e "${BLUE}üìù Version:${NC} $SCRIPT_VERSION"
echo ""
echo -e "${BLUE}üöÄ Pour utiliser SymGuard:${NC}"
if [ -x "$WRAPPER_SCRIPT" ]; then
    echo "   $SCRIPT_NAME                    # Commande globale"
else
    echo "   source ~/.bashrc               # Recharger le shell"
    echo "   $SCRIPT_NAME                   # Alias local"
fi
echo "   cd $INSTALL_DIR/SymGuard && python3 script.py  # Direct"
echo ""
echo -e "${BLUE}üîÑ Mise √† jour:${NC}"
echo "   $UPDATE_SCRIPT     # Script de mise √† jour"
echo "   cd $INSTALL_DIR/SymGuard && git pull  # Manuel"
echo ""
echo -e "${BLUE}üìã Options utiles:${NC}"
echo "   --dry-run     : Mode simulation"
echo "   --real        : Mode r√©el (suppression)"
echo "   --quick       : Scan basique uniquement"
echo "   -j 4          : 4 workers parall√®les"
echo ""
echo -e "${BLUE}üìä Logs et rapports:${NC}"
echo "   Logs: $HOME_DIR/symlink_maintenance.log"
echo "   Rapports: $INSTALL_DIR/SymGuard/symlink_report_*.json"
echo "   Suppressions: $INSTALL_DIR/SymGuard/deleted_files_*.log"

echo -e "\n${GREEN}‚úÖ Pr√™t √† analyser vos liens symboliques !${NC}"
