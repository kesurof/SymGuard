#!/bin/bash

# Configuration et installation de SymGuard pour serveur ssd-83774
# Ubuntu 22.04.5 LTS - aarch64 - utilisateur kesurof

set -e  # Arr√™t en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Configuration SymGuard pour serveur ssd-83774${NC}"
echo "=============================================="

# Variables d'environnement d√©tect√©es
USER_NAME=${USER:-kesurof}
HOME_DIR=${HOME:-/home/$USER_NAME}
SETTINGS_SOURCE=${SETTINGS_SOURCE:-$HOME_DIR/seedbox-compose}
VIRTUAL_ENV_PATH=${VIRTUAL_ENV:-$SETTINGS_SOURCE/venv}

echo -e "${BLUE}üìã Informations d√©tect√©es:${NC}"
echo "   Utilisateur: $USER_NAME"
echo "   Home: $HOME_DIR"
echo "   Settings: $SETTINGS_SOURCE"
echo "   Virtual Env: $VIRTUAL_ENV_PATH"

# V√©rification de l'environnement virtuel
echo -e "\n${BLUE}üêç V√©rification environnement Python...${NC}"

if [ -d "$VIRTUAL_ENV_PATH" ]; then
    echo -e "${GREEN}‚úÖ Environnement virtuel trouv√©: $VIRTUAL_ENV_PATH${NC}"
    
    # Activation de l'environnement virtuel
    source "$VIRTUAL_ENV_PATH/bin/activate"
    
    echo "   Python: $(python3 --version)"
    echo "   Pip: $(pip --version | cut -d' ' -f1-2)"
    
else
    echo -e "${RED}‚ùå Environnement virtuel non trouv√©${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Cr√©ation d'un nouvel environnement virtuel...${NC}"
    
    python3 -m venv "$VIRTUAL_ENV_PATH"
    source "$VIRTUAL_ENV_PATH/bin/activate"
    pip install --upgrade pip
fi

# Installation des d√©pendances
echo -e "\n${BLUE}üì¶ Installation des d√©pendances...${NC}"

if [ -f "requirements.txt" ]; then
    echo "Installation depuis requirements.txt..."
    pip install -r requirements.txt
else
    echo "Installation manuelle des d√©pendances essentielles..."
    pip install requests urllib3 psutil
fi

# V√©rification de ffprobe
echo -e "\n${BLUE}üîß V√©rification ffprobe...${NC}"

if command -v ffprobe &> /dev/null; then
    FFPROBE_VERSION=$(ffprobe -version 2>/dev/null | head -n1 | awk '{print $3}')
    echo -e "${GREEN}‚úÖ ffprobe trouv√©: $FFPROBE_VERSION${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è ffprobe non trouv√©${NC}"
    echo "Pour installer ffmpeg/ffprobe:"
    echo "   sudo apt update && sudo apt install ffmpeg"
fi

# V√©rification de Docker
echo -e "\n${BLUE}üê≥ V√©rification Docker...${NC}"

if command -v docker &> /dev/null; then
    if docker ps &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker accessible${NC}"
        
        # Liste des conteneurs m√©dia
        echo "Conteneurs m√©dia d√©tect√©s:"
        for container in sonarr radarr bazarr prowlarr; do
            if docker ps --filter name=$container --format "{{.Names}}" | grep -q $container; then
                STATUS=$(docker ps --filter name=$container --format "{{.Status}}")
                echo -e "   ${GREEN}‚úÖ $container${NC}: $STATUS"
            else
                echo -e "   ${YELLOW}‚ö†Ô∏è $container${NC}: non trouv√©"
            fi
        done
    else
        echo -e "${YELLOW}‚ö†Ô∏è Docker install√© mais non accessible (permissions?)${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è Docker non trouv√©${NC}"
fi

# Cr√©ation du lien symbolique pour faciliter l'ex√©cution
echo -e "\n${BLUE}üîó Configuration raccourcis...${NC}"

# Rendre le script ex√©cutable
chmod +x script.py

# Cr√©er un alias dans .bashrc si pas d√©j√† pr√©sent
BASHRC_FILE="$HOME_DIR/.bashrc"
ALIAS_LINE="alias symguard='cd $(pwd) && python3 script.py'"

if [ -f "$BASHRC_FILE" ]; then
    if ! grep -q "alias symguard=" "$BASHRC_FILE"; then
        echo "" >> "$BASHRC_FILE"
        echo "# SymGuard alias" >> "$BASHRC_FILE"
        echo "$ALIAS_LINE" >> "$BASHRC_FILE"
        echo -e "${GREEN}‚úÖ Alias 'symguard' ajout√© √† .bashrc${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Alias 'symguard' d√©j√† pr√©sent${NC}"
    fi
fi

# Test d'ex√©cution rapide
echo -e "\n${BLUE}üß™ Test d'ex√©cution...${NC}"

if python3 script.py --help &> /dev/null; then
    echo -e "${GREEN}‚úÖ Script fonctionnel${NC}"
else
    echo -e "${RED}‚ùå Erreur lors du test${NC}"
fi

# V√©rification des permissions sur /home/kesurof/Medias
MEDIA_DIR="$HOME_DIR/Medias"
echo -e "\n${BLUE}üìÅ V√©rification r√©pertoire m√©dia...${NC}"

if [ -d "$MEDIA_DIR" ]; then
    if [ -r "$MEDIA_DIR" ]; then
        SYMLINK_COUNT=$(find "$MEDIA_DIR" -type l 2>/dev/null | wc -l)
        echo -e "${GREEN}‚úÖ $MEDIA_DIR accessible${NC}"
        echo "   Liens symboliques d√©tect√©s: $SYMLINK_COUNT"
    else
        echo -e "${RED}‚ùå $MEDIA_DIR non accessible en lecture${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è $MEDIA_DIR non trouv√©${NC}"
fi

# R√©sum√© final
echo -e "\n${GREEN}üéâ CONFIGURATION TERMIN√âE${NC}"
echo "=============================================="
echo -e "${BLUE}Pour utiliser SymGuard:${NC}"
echo "1. Source votre .bashrc: source ~/.bashrc"
echo "2. Utilisez la commande: symguard"
echo "3. Ou directement: python3 script.py"
echo ""
echo -e "${BLUE}Options utiles:${NC}"
echo "   --dry-run     : Mode simulation"
echo "   --real        : Mode r√©el (suppression)"
echo "   --quick       : Scan basique uniquement"
echo "   -j 4          : 4 workers parall√®les"
echo ""
echo -e "${BLUE}Logs syst√®me:${NC}"
echo "   Logs: $HOME_DIR/symlink_maintenance.log"
echo "   Rapports: ./symlink_report_*.json"
echo "   Suppressions: ./deleted_files_*.log"

echo -e "\n${GREEN}‚úÖ Pr√™t √† analyser vos liens symboliques !${NC}"
